@page "/"
@page "/ro-home"
@using GasescUnNumeCandva.Scripts


<PageTitle>Index</PageTitle>

<h1>Bine ați venit!</h1>

<div>
    <select asp-for="Selectati tipul de numere pe care doriti sa le inmultiti:" @bind="numbers_type">
        <option disabled hidden selected>Selectati tipul de numere folosite:</option>
        <option>Intregi</option>
        <option>Fractionare</option>
    </select>
</div>

<div>
    <p></p>
    <select asp-for="Selectati formatul:" @bind="numbers_form">
        <option disabled hidden selected>Selectati formatul:</option>
        <option>Forma binara</option>
        <option>Forma zecimala</option>
    </select>
</div>

<div class="flex-column">
    <p></p>
    <p>Introduceti numerele: </p>
    <div class="d-flex">
        <div class="card">
            <p>x: </p>
            <input type="text" @bind="x"/>
        </div>
        <p></p>
        <div class="card">
            <p>y: </p>
            <input type="text" @bind="y"/>
        </div>
    </div>
</div>

<div>x = @x</div>
<div>y = @y</div>

<div>
    <p></p>
    <select asp-for="Selectati algoritmul:" @bind="algorithm_type">
        <option disabled hidden selected>Selectati algoritmul:</option>
        <option>SignMagnitude</option>
        <option>Robertson</option>
        <option>Booth</option>
    </select>
</div>



<div>
    <p></p>
    <button class="btn btn-primary" @onclick="OnPostRunMethod">Click me</button>
    <p>result "@result"</p>
</div>


@code

{
    private string numbers_type;
    private string numbers_form;
    private string algorithm_type;
    private string x, y;

    private string result;

    private Numbers num;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private int SelectToInt()
    {
        switch (numbers_form)
        {
            case "Forma binara":
                return 1;
            case "Forma zecimala":
                return 2;
            default:
                return 0;
        }
    }

    private int SelectNumberType()
    {
        switch (algorithm_type)
        {
            case "Intregi":
                return 1;
            case "Fractionare":
                return 2;
            default:
                return 0;
        }
    }

    public void OnPostRunMethod()
    {
        switch (algorithm_type)
        {
            case "SignMagnitude":
            {
                SignMagnitude sm = new SignMagnitude(Int32.Parse(x), Int32.Parse(y), SelectNumberType(), SelectToInt());
                result = sm.Calculate();
                //Console.WriteLine(result);
                break;
            }
            case "Robertson":
            {
                break;
            }
            case "Booth":
            {
                break;
            }
            default:
            {
                Console.Out.Write("Invalid algorithm");
                break;
            }
        }
    }

}
